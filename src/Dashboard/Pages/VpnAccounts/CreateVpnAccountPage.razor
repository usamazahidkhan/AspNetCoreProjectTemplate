@attribute [Route(PageRoutes.createVpnAccount)]

<PageTitle> Create VPN Account </PageTitle>

<!-- Page header -->
<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center">
            <div class="col">
                <!-- Page pre-title -->
                <div class="page-pretitle">
                    Create
                </div>
                <h2 class="page-title">
                    Create VPN Account
                </h2>
            </div>
        </div>
    </div>
</div>
<!-- Page body -->
<div class="page-body">
    <div class="container-xl">
        <div class="row justify-content-center">
            <div class="col-12 ">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="text-center my-2 mb-4">
                            <h1>Create Account</h1>
                        </div>
                        <EditForm Model="@model" OnValidSubmit="SubmitAsync">

                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <MudTextField @bind-Value="model.userName" For="@(() => model.userName)"
                                              Label="User Name" Variant="Variant.Outlined" Margin="Margin.Dense">
                                </MudTextField>
                            </div>

                            <div class="mb-3">

                                <MudTextField @bind-Value="model.password" For="@(() => model.password)"
                                              Margin="Margin.Dense"
                                              Label="Password" Variant="Variant.Outlined"
                                              InputType="@PasswordInput"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@passwordInputIcon"
                                              OnAdornmentClick="TogglePassword"
                                              AdornmentAriaLabel="Show Password" />
                            </div>

                            <MudButton ButtonType="ButtonType.Submit"
                                       EndIcon="@Icons.Material.Sharp.Save"
                                        class="mt-1 btn btn-primary float-end">
                                Create
                            </MudButton>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@inject IMediator mediator
@inject NavigationManager navManager

@code {

    private CreateVpnAccountCommand model = new();

    private bool isShow = true;
    private InputType PasswordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task SubmitAsync()
    {
        if (await mediator.Send(model))
        {
            navManager.NavigateTo(PageRoutes.vpnAccounts);
        }
    }

    private void TogglePassword()
    {
        isShow = !isShow;
        passwordInputIcon = isShow ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
        PasswordInput = isShow ? InputType.Password : InputType.Text;
    }

} 