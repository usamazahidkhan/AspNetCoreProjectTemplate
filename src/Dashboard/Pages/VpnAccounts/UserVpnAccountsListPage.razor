@attribute [Route(PageRoutes.users)]

@inject UserManager userManager

<!-- Page header -->
<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center">
            <div class="col">
                <!-- Page pre-title -->
                <div class="page-pretitle">
                    Overview
                </div>
                <h2 class="page-title">
                    All Users
                </h2>
            </div>
        </div>
    </div>
</div>
<!-- Page body -->
<div class="page-body">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <MudTable Dense="true" Hover="true" Bordered="true" Striped="true"
                          ServerData="@(new Func<TableState, Task<TableData<ApplicationUser>>>(ServerReload))"
                          @ref="table" class="shadow bg-light">
                    <ToolBarContent>
                        <div class="my-3">
                            <MudButton Href="@PageRoutes.createUser" Size="Size.Small"
                                       StartIcon="@Icons.Material.Sharp.Add"
                                       Color="Color.Primary" Variant="Variant.Filled">
                                Add Vpn Account
                            </MudButton>
                        </div>
                        <MudSpacer />
                        <div class="my-3">
                            <MudTextField Variant="Variant.Outlined" T="string" ValueChanged="@(s => OnSearch(s))"
                                          Placeholder="Search" Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                                          Margin="Margin.Dense" Class="mt-0"></MudTextField>
                        </div>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>User Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Email Confirmed</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="item">
                        <MudTd DataLabel="Id">@item.Id</MudTd>
                        <MudTd DataLabel="Created On">@item.UserName</MudTd>
                        <MudTd DataLabel="User Name">@item.Email</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip Color="statusColor[item.EmailConfirmed]"
                                     Size="Size.Small" Variant="Variant.Filled">
                                @item.EmailConfirmed
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                           Href="@(PageRoutes.updateUser + $"/{item.Id}")"
                                           Size="Size.Small" Color="Color.Primary" aria-label="update"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                           Href="@(PageRoutes.updateUser + $"/{item.Id}")"
                                           Size="Size.Small" Color="Color.Warning" aria-label="delete"></MudIconButton>
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>

                </MudTable>
            </div>
        </div>
    </div>
</div>

@code {

    private Dictionary<bool, Color> statusColor = new() {
        { true, Color.Success },
        { false, Color.Warning }
    };

    private IEnumerable<ApplicationUser> pagedData;
    private MudTable<ApplicationUser> table;

    private int totalItems;
    private string searchString = null;

    private async Task<TableData<ApplicationUser>> ServerReload(TableState state)
    {
        var data = userManager.Users;

        var users = await data.PaginatedListAsync(state.Page, state.PageSize);

        pagedData = users.Items;
        totalItems = users.TotalCount;

        return new TableData<ApplicationUser>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}